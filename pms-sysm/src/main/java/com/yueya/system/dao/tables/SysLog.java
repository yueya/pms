/*
 * This file is generated by jOOQ.
 */
package com.yueya.system.dao.tables;


import com.yueya.system.dao.Indexes;
import com.yueya.system.dao.Keys;
import com.yueya.system.dao.Pms;
import com.yueya.system.dao.tables.records.SysLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 日志表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysLog extends TableImpl<SysLogRecord> {

    private static final long serialVersionUID = -147468582;

    /**
     * The reference instance of <code>pms.sys_log</code>
     */
    public static final SysLog SYS_LOG = new SysLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysLogRecord> getRecordType() {
        return SysLogRecord.class;
    }

    /**
     * The column <code>pms.sys_log.id</code>. 编号
     */
    public final TableField<SysLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "编号");

    /**
     * The column <code>pms.sys_log.type</code>. 日志类型
     */
    public final TableField<SysLogRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.CHAR)), this, "日志类型");

    /**
     * The column <code>pms.sys_log.title</code>. 日志标题
     */
    public final TableField<SysLogRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "日志标题");

    /**
     * The column <code>pms.sys_log.create_by</code>. 创建者
     */
    public final TableField<SysLogRecord, String> CREATE_BY = createField("create_by", org.jooq.impl.SQLDataType.VARCHAR(64), this, "创建者");

    /**
     * The column <code>pms.sys_log.create_date</code>. 创建时间
     */
    public final TableField<SysLogRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>pms.sys_log.remote_addr</code>. 操作IP地址
     */
    public final TableField<SysLogRecord, String> REMOTE_ADDR = createField("remote_addr", org.jooq.impl.SQLDataType.VARCHAR(255), this, "操作IP地址");

    /**
     * The column <code>pms.sys_log.user_agent</code>. 用户代理
     */
    public final TableField<SysLogRecord, String> USER_AGENT = createField("user_agent", org.jooq.impl.SQLDataType.VARCHAR(255), this, "用户代理");

    /**
     * The column <code>pms.sys_log.request_uri</code>. 请求URI
     */
    public final TableField<SysLogRecord, String> REQUEST_URI = createField("request_uri", org.jooq.impl.SQLDataType.VARCHAR(255), this, "请求URI");

    /**
     * The column <code>pms.sys_log.method</code>. 操作方式
     */
    public final TableField<SysLogRecord, String> METHOD = createField("method", org.jooq.impl.SQLDataType.VARCHAR(5), this, "操作方式");

    /**
     * The column <code>pms.sys_log.params</code>. 操作提交的数据
     */
    public final TableField<SysLogRecord, String> PARAMS = createField("params", org.jooq.impl.SQLDataType.CLOB, this, "操作提交的数据");

    /**
     * The column <code>pms.sys_log.exception</code>. 异常信息
     */
    public final TableField<SysLogRecord, String> EXCEPTION = createField("exception", org.jooq.impl.SQLDataType.CLOB, this, "异常信息");

    /**
     * Create a <code>pms.sys_log</code> table reference
     */
    public SysLog() {
        this(DSL.name("sys_log"), null);
    }

    /**
     * Create an aliased <code>pms.sys_log</code> table reference
     */
    public SysLog(String alias) {
        this(DSL.name(alias), SYS_LOG);
    }

    /**
     * Create an aliased <code>pms.sys_log</code> table reference
     */
    public SysLog(Name alias) {
        this(alias, SYS_LOG);
    }

    private SysLog(Name alias, Table<SysLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysLog(Name alias, Table<SysLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("日志表"));
    }

    public <O extends Record> SysLog(Table<O> child, ForeignKey<O, SysLogRecord> key) {
        super(child, key, SYS_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Pms.PMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_LOG_PRIMARY, Indexes.SYS_LOG_SYS_LOG_CREATE_BY, Indexes.SYS_LOG_SYS_LOG_CREATE_DATE, Indexes.SYS_LOG_SYS_LOG_REQUEST_URI, Indexes.SYS_LOG_SYS_LOG_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SysLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_SYS_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysLogRecord> getPrimaryKey() {
        return Keys.KEY_SYS_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysLogRecord>> getKeys() {
        return Arrays.<UniqueKey<SysLogRecord>>asList(Keys.KEY_SYS_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysLog as(String alias) {
        return new SysLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysLog as(Name alias) {
        return new SysLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysLog rename(String name) {
        return new SysLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysLog rename(Name name) {
        return new SysLog(name, null);
    }
}
